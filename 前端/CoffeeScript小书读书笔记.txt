注释格式: 
# 单行注释
###
	多行注释
###
CoffeeScript对空格是敏感的，就是说你可以用制表符来替换花括号。

变量和作用域
CoffeeScript修复了一个javascript中一个最让人头疼的问题，全局变量。
在coffeescript中，它通过一个匿名函数把所有脚本都包裹起来，将其限定在局部作用域中，并且为所有的变量赋值前自动添加var。
但是有时候全局变量是有用的，这时候就直接给全局对象赋值(浏览器中的windows)赋值来获得全局变量，也可以通过下面这种模式。
exports = this
exports.MyVariable = "foo-bar"
在顶级作用域中，this就相当于全局对象，你可以创建一个局部变量exports让阅读你代码的人能够分清楚哪些是脚本创建的全局变量。而且，这还能为支持CommonJS模块铺平了道路，这在本书的后面会做介绍。


函数
coffeescript中移除了冗长的function语句，用->代替
函数参数
如何指定参数呢？coffeescript允许你通过在箭头前面的括号中指定参数。
times = (a,b) -> a*b
coffeescript还支持默认参数
times = (a=1,b=2) -> a*b
还可以使用参数槽(splats)接受多个参数，使用...来表示
sum = (nums...) ->
	result = 0
	nums.forEach(n) ->result += n
	result
在上面的例子中，nums是一个包含传递给函数全部参数的数组。它不是一个arugments对象，而是一个真实的数组对象，这样的话在你想操作它的时候就不需要先使用Array.prototype.splice或者jQuery.makeArray()了。
	trigger= (events...) ->
		events.splice(1,0,this)
		this.constructor.trigger.apply(events)

函数调用
	在javascript中，可以通过括弧()、apply()和call()来调用函数。然而，像Ruby一样，如果函数被至少一个参数跟着的话，Coffeescript会自动的调用这个函数。

	a = "Howdy!"

	alert a
	# Equivalent to:
	alert(a)

	alert inspect a
	# Equivalent to:
	alert(inspect(a))
尽管括号不是必须的，但是在难以分清谁是被调用的函数那些是参数时，最好用上括号。
	例如: alert inspect(a)

函数上下文
	在javascript上下文会频繁的变化。尤其是在回调函数中，coffeescript为此提供了一种辅助。其中之一就是->的变种胖箭头=>

	使用胖箭头代替普通箭头是为了确保函数的上下文可以绑定为当前的上下文。例如：
	this.clickHandler = -> alert "clicked"
	element.addEventListener "click", (e) => this.clickHandler(e)
	你之所以要这样做的原因是，来自addEventListener的回调函数会以element为上下文被调用，也就是说，this就相当于这个元素。如果你想让this等于上下文之外，除了使用self=this，胖箭头也是一种方式。

	这种绑定的思想与jQuery的proxy()或者ES5's的bind()函数是类似的概念。

对象字面量与数组定义
	就如在javascript中一样，可以使用一对大括号以及键/值来明确定义对象字面量。然而，与函数调用类似，coffeescript使得可以省略括号。事实上，你还可以使用缩进和换行来代替起分割作用的逗号。
		object1 = {one: 1,two: 2}

		#without braces
		object2 = one: 1,two: 2

		#using new lines instead of commas
		object3 = 
			one: 1
			two: 2

		User.create(name: "John Smith")
	同样的，数组可以使用空格来代替分割作用的逗号，但是方括号([])还是需要的。

		array1 = [1,2,3]

		array2 = [
			1
			2
			3
		]

		array3 = [1,2,3,]
	像你在上例看到的那样，coffeescript还能去掉array3末尾多余的逗号，这也是一个常见的跨浏览器错误源

流程控制
	这种可省略括号的便捷方式延续到了coffeescript中的if和else关键字
		if true == true
			"We're ok"

		if true != true then "Panic"

		#Equivalent to:
		# (1>0)?"ok":"Y2k!"
		if 1>0 then "ok" else "y2k!"
	如你所见，在单行的if语句中，你需要使用then关键字，这样coffeescript才能明白执行体从什么时候开始。coffeescript并不支持条件运算符，作为替代你需要使用单行的ifelse语句。

	coffeescript还支持一项ruby的特性，即运行在if语句前使用前缀表达式
		alert "It's cold!" if heat < 5
	你还可以使用not关键字来代替感叹号(!)来做取反操作。由于很容易错过感叹号，这在某些时候能让你的代码有更强的可读性。
		if not true then "Panic"
	在上面的例子中，我们还可使用coffeescript的unless关键字，即if的否定。
		unless true
			"Panic"
	与not类似的风格，coff还为大家提供了is语句，编译过去就是===。
		if true is 1
			"Type coercion fail!"
	你可以使用isnt代替is not。
		if true isnt true
			alert "Opposite day!"
	在上面的例子中你可能已经注意到了，coffeescript会把==操作符转化为===，把!=转化为!==。

字符串插值法
	coffeescript将ruby风格的字符串插值法引入到了javascript中。在双引号的字符串中可以包含#{}标记，这些标记中可以包含被插入到字符串中的表达式。
		favorite_color = "Blue. No,yel..."
		question = "Bridgekeeper: What...is your favorite color?
					Galahad: #{favorite_color}
					Bridgekeeper: Wrong!
					"
	就上例所示，多行字符串是允许的，不需要再每一行前添加+。

循环和列表解析
	javascript中的数组迭代使用一种相当古老的语法，看上去更像一个类似于C之类的老语言，而不是现代的面向对象的语言。ES5引入foreach()函数来稍微改善了下这种状况，但是这样的话每次迭代都需要调用一次函数，因此运行速度会变慢。再一次，coffeescript给出一种漂亮的语法拯救了我们：
		for name in ["Roger","Roderick","Brian"]
			alert "Release #{name}"
		如果你需要知道当前迭代索引的话，只需要再多传一个参数：

		for name,i in ["Roger the pickpocket","Roderick the robber"]
			alert "#{i} - Release #{name}"
		使用前缀的形式你可以一行代码完成迭代
		就如python的推导式一样，你可以过滤它们;
			Prisoners = ["Roger","Roderick","Brian"]
			release prisoner for prisoner in prisoners when prisoner[0] is "R"
		你可以使用推导式来迭代对象的全部属性，不过要使用of代替in关键字。
			names = sam: seaborn,donna: moss
			alert("#{first} #{last}") for first,last of names
		唯一coffeescript暴露出来的底层循环语法是while循环。它与原javascript中while循环的行为差不多，只是包含了已添加的优点，它能返回一个结果数组。看起来像是Array.prototype.map()函数。
			num = 6
			minstrel = while num -= 1
				num + "Brave Sir Robin ran away"

数组
	说道使用区间来分割数组，coffeescript是受到了ruby的影响。使用两个数字来定义区间，分别代表区间的第一个和最后一个位置。这两个数字之间使用..或者...来分割。如果区间之前没有任何东西，coffeescript会将其转换为一个数组。
		range = [1..5]
	然而，如果区间被指定到一个变量之后，coffeescript则会将其转换为一个slice()函数调用。
		firstTwo = ["one","two","three"][0..1]
	在上面的例子中，区间会返回一个只包含原始数组的前两个元素的新的字符串。你也可以使用同样的语法把数组中的某个片段替换为其他的数组。
		numbers = [0..9]
		numbers[3..5] = [-3,-4,-5]
	更棒的是，javascript还能让你在字符串上调用slice()，
	因此你可以在字符串上使用区间来获得一个新的字符串。
		my = "my string"[0..2]
	在javascript中检测数组中是否存在某个值是一件麻烦事，特别是indexOf不是所有的浏览器都支持(IE，就是你)。coffeescript使用in操作符来解决这个问题，例如：
		words = ["rattled","roudy","rebbles","ranks"]
		alert "stop wagging me" if "ranks" in words

别名和存在操作符
	coffeescript采用了一些有用的别名来减少输入量。期中一个就是@，是this的别名。
		@saviour = true
	另外一个是::,prototype的别名。
		User::first = -> @records[0]
	在javascript中使用if来做null检查是很常见的，但是其中有几个陷阱，空字符串和零都被强制转化为false，这往往会让你犯错。coffeescript存在操作符?只会在变量为null或者undefined的时候会返回真，与Ruby的nils类似。

		praise if brian?
	你还能用它来替换||操作符：
		velocity = southern ? 40
	如果你在访问属性之前进行null检查，你可以把存在操作符放在它左边来跳过检查。这与Actice Support的try方法比较类似。
		blackKnight.getLegs()?.kick()
	你能用同样的方法检查一个属性是否是函数，是否可以调用，把存在操作符放在括号之前就行。如果属性不存在，或者不是一个函数，则就不会被调用。
		blackKnight.getLegs().kick?()


类

	javascript中的类对于纯粹主义者来说有点像大蒜对Dracula的感觉。coffeescript为此提供了一个很棒的抽象。

	在背后，coffeescript使用javascript原生的原型来产生类，为静态变量继承以及上下文持久化添加了一点语法糖，而暴露给开发者的全部只有一个class关键字。
		class Animal
	在上例中，Animal是类的名字，而且也是你可以用来创建实例的合成的变量的名字。
	coffeescript在背后使用了一个构造函数，这意味着你可以使用new关键字来实例化变量。
		animal = new Animal
	定义构造函数(在实例化前调用的函数)很简单，使用名为construction的函数即可。这与Ruby的initialize或者python的_init_类似。
		class Animal
			constructor: (name)->
				@name= name
	实际上，coffeescript为设置实例属性值的常见模式提供了一种简写的方式。如果在参数前加一个@，coffeescript就会在构造函数中自动地把参数设置为实例的属性。而且，这种简写对于类之外的普通函数同样适用。下面的例子与我们手动设置实例属性的上一例子等价。
		class Animal
			constructor: (@name) ->
	如你所愿，每个实例化传入的参数都被代理给了构造函数。
		animal = new Animal("Parrot")
		alert "Animal is a #{animal.name}"

实例属性
	可以非常直接地为类添加实例属性，与为对象添加属性的语法一样。只需要在类体内对属性采用合理的缩进即可。
		class animal
			price: 5

			sell: (customer) ->

		animal = new Animal
		animal.sell(new Customer)
	在javascript中上下文变化很频繁，在上一章语法中我们讨论过coffeescript如何通过胖箭头函数(=>)来让this值锁定到某个特定的上下文中。这样无论这个函数在什么上下文中被调用，因此在实例方法上使用胖箭头你就能确保方法能在正确的上下文中执行——this总是等于当前的实例对象。
		class Animal
			price: 5

			sell: =>
				alert "Give me #{@price} shillings!"

		animal = new Animal
		$("#sell").click(animal.sell)
	如上例所示，这在事件回调是尤其有用。正常情况下sell()函数会以#sell元素为上下文调用。然而，通过使用胖箭头来定义sell()，我们能保证正常的上下文，所以this.price等于5。

静态变量
	可以定义类(静态)变量吗？当然，事实证明在类的定义中，this引用的就是类。也就是说你可以通过直接在这个this上设置类属性。
		class Animal
			this.find = (name)->

		Animal.find("Parrot")
	实际上，如你所知，coffeescript中使用@作为this的别名，这能让你更加快捷的定义静态属性：

		class Animal
			@find: (name)->

		Animal.find("Parrot")

继承与Super
	不支持继承不能算是一个完整的类实现。当然coffeescript不会让你失望，你可以使用extends关键字来使用继承。在下面的例子中，Parrot扩展自Animal，继承它的实例的所有属性，比方说alive()方法。
		class Animal
			constructor: (@name) ->

			alive: ->
				false

		class Parrot extends Animal
			constructor: ->
				super("Parrot")

			dead: ->
				not @alive()
	在上例中，我们使用了super()关键字。在背后这会编译为对父型原型的一次函数调用，不过是以当前为上下文的。在本例中，就相当于Parrot._super_.constructor.call(this."Parrot");。实际上，这与Ruby或者Python中调用super的效果相同---调用被重写了的父类函数。
	除非你重写了constructor，默认情况下，在一个实例被创建时coffeescript会调用其父类的构造器。

	coffeescript使用原型继承来自动的从类实例上继承所有的属性，这保证了类的动态性。就算你给一个已经被子类继承了的父类添加属性，这些属性仍然可以被其子类继承过来。
		class Animal
			constructor: (@name)->

		class Parrot extends Animal

		Animal::rip = true

		Parrot = new Parrot("Macaw")
		alert("This parrot is no more") if parrot.rip
	值得一提的是，静态变量是直接拷贝给子类的，而不是像实例属性那样通过原型来实现的。这都是javascript原型架构的实现细节所致，而且这是一个比较难解决的问题。

Mixins
	coffeescript并不直接提供对Mixins的支持，理由是你自己完全可以很容易的实现。例如，下面有两个函数，extend()和include()分别把类属性和实例属性添加到一个类中。
		extend = (obj,mixin) ->
			obj[name] = method for name,method of mixin
			obj

		include = (klass,mixin)->
			extend klass.prototype,mixin

		#Usage
		include Parrot
			isDeceased: true

		(new Parrot).isDeceased
	在继承不合适时Mixins是一种不错的在模块间共享通用逻辑的模式。较之于继承只能实现从单一的父类继承，Mixins的优势是能实现多个继承。


扩展类
	Mixins很棒，只是看起来并不那么地面对对象。让我们把Mixins集成到coffeescript的类中吧。我们将会定义一个名为Module的类，然后可以继承这个类来获得对Mixins的支持。Module会有两个静态方法，@extend()和@include()，可以用它们来实现对类的静态属性和实例属性的扩展。
		moduleKeywords = ['extended','included']

		class Module
			@extend: (obj) ->
				for key,value of obj when key not in moduleKeywords
				@[key] = value
				obj.extended?.apply(@)
				this

			@include: (obj) ->
				for key,value of obj when key not in moduleKeywords
				#Assign properties to the prototype
				@::[key] = value

			obj.includeed?.apply(@)
			this
	这里有个小技巧，当你使用Mixins来扩展一个类时，moduleKeywords变量能为我们提供了回调支持。让我们实际看一下Module是如何工作的：
		classProperties = 
			find: (id) ->
			create: (attrs) ->

		instanceProperties =
			save: ->

		class User extends Module
			@extend classProperties
			@inculde instanceProperties

		#Usage
		user = User.find(1)

		user = new User
		user.save()
	如你所见，我们为User类添加了find()和create()静态属性，还添加了save()实例属性。

	既然在扩展模块后我们还可以使用回调函数，于是可以快捷地处理类属性和实例属性。
		ORM =
			find: (id) ->
			create: (attrs) ->
			extended: ->
				@include
					save: ->

		class User extends Module
			@extend ORM
	超简单也超优雅。		


CoffeeScript惯用法

each
	ECMAScript5中加入forEach这一新特性。
	for (var i=0; i < array.length; i++)
		myFunction(array[i]);

	array.forEach(function(item, i){
		myFunction(item)
	});
	例如 myFunction(item) for item in array
	这种语法简洁易懂，而且在背后会被编译为for循环。

Map
	ECMAScript5中加入map这一新特性。
	这是一个函数。
	例如原生js中为
	var result = []
	for(var i=0;i<array.length;i++)
		result.push(array[i].name)

	var result = array.map(function(item,i){
		return item.name;0
	});
	而在coffee中，则为
	result = (item.name for item in array)

筛选
	ECMAScript5中加入filter这一新特性。
	例如
	var result = []
	for(var i=0;i<array.length;i++)
		if(array[i].name == "test")
			result.push(array[i])

	


